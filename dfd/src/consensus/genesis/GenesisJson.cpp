#ifndef DFD_TEST_NETWORK

#include <consensus/genesis/GenesisJson.hpp>
#include <consensus/genesis/GenesisState.hpp>

#include <string>
#include <fc/crypto/sha256.hpp>
#include <fc/io/raw.hpp>

namespace dfdcore {
    namespace consensus {static const unsigned char raw_genesis_config0[] =
{
	0x00, 0xe1, 0x0b, 0x5e, 0x00, 0x09, 0x05, 0x74, 0x65, 0x73, 0x74, 0x30, 0x03,
	0xd4, 0x61, 0xe9, 0x7a, 0xfe, 0x31, 0xb1, 0xda, 0x87, 0x01, 0x7b, 0x01, 0xb3,
	0xd1, 0xba, 0xe4, 0xfb, 0x39, 0x64, 0x50, 0xa2, 0xd7, 0x34, 0xa5, 0x54, 0xc7,
	0x9e, 0x77, 0xac, 0xdf, 0x41, 0x8a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x31, 0x03,
	0xe6, 0x1d, 0x63, 0x93, 0xc6, 0xb6, 0xad, 0xb5, 0x56, 0x98, 0x0a, 0xf7, 0x35,
	0x61, 0x5a, 0x0a, 0x9f, 0x4c, 0x85, 0xbc, 0x74, 0x0b, 0x1a, 0xb1, 0x1a, 0x68,
	0xd2, 0x11, 0xb4, 0x03, 0x04, 0x98, 0x05, 0x74, 0x65, 0x73, 0x74, 0x32, 0x02,
	0xeb, 0x6c, 0x59, 0x84, 0x6d, 0xf9, 0x03, 0x4c, 0x3e, 0x74, 0x3b, 0x1c, 0x20,
	0x81, 0xbd, 0x71, 0x03, 0x4e, 0xb4, 0xfa, 0x77, 0x04, 0xc9, 0x3b, 0x7f, 0x64,
	0xb3, 0xbf, 0x57, 0xd2, 0x2e, 0x56, 0x05, 0x74, 0x65, 0x73, 0x74, 0x33, 0x02,
	0xed, 0x10, 0x00, 0x9d, 0x3a, 0xfc, 0xa2, 0xcc, 0x0a, 0xe0, 0xdd, 0x43, 0xb5,
	0x7d, 0x09, 0xc2, 0x72, 0xc0, 0x72, 0x4d, 0x3c, 0x3c, 0xfe, 0xd5, 0xa7, 0x8e,
	0xd7, 0x7e, 0xb5, 0x7b, 0x60, 0xa7, 0x05, 0x74, 0x65, 0x73, 0x74, 0x34, 0x03,
	0xc5, 0x3c, 0x6f, 0xc2, 0xc3, 0xf9, 0x95, 0xf8, 0xe7, 0xd6, 0x6e, 0xad, 0x0d,
	0x37, 0x6b, 0xd9, 0x75, 0xc3, 0x3b, 0x9a, 0x63, 0x65, 0xee, 0xf1, 0xfa, 0x9e,
	0x2e, 0x70, 0x03, 0x49, 0x50, 0xc0, 0x05, 0x74, 0x65, 0x73, 0x74, 0x35, 0x02,
	0xe7, 0xae, 0x1f, 0xd6, 0x73, 0x7d, 0x0b, 0x94, 0x8d, 0x8d, 0xd0, 0xaf, 0xb5,
	0xb6, 0xd6, 0xfb, 0x10, 0x9b, 0x99, 0x3e, 0x06, 0xe7, 0xc5, 0xfa, 0x7e, 0x50,
	0xbc, 0xda, 0x11, 0xb7, 0x12, 0xe7, 0x05, 0x74, 0x65, 0x73, 0x74, 0x36, 0x03,
	0xf5, 0xa5, 0x35, 0x5b, 0x03, 0x0c, 0xc0, 0x99, 0x71, 0x22, 0x90, 0x65, 0x33,
	0xcc, 0x91, 0xfb, 0xea, 0x6d, 0xad, 0xde, 0xeb, 0x6e, 0x10, 0x3b, 0xa7, 0x48,
	0x57, 0x8b, 0xd3, 0x64, 0x91, 0xb2, 0x05, 0x74, 0x65, 0x73, 0x74, 0x37, 0x03,
	0x42, 0xd8, 0xa7, 0x4d, 0x5b, 0x0b, 0xbc, 0xa0, 0xd4, 0xe0, 0x31, 0xf8, 0xde,
	0xb2, 0x93, 0x61, 0x07, 0xf9, 0x45, 0x21, 0x7e, 0x00, 0x19, 0x32, 0xed, 0x01,
	0x06, 0xe4, 0x48, 0x07, 0x41, 0xd5, 0x05, 0x74, 0x65, 0x73, 0x74, 0x38, 0x02,
	0x63, 0x71, 0xfc, 0xc1, 0xe8, 0xb8, 0xb5, 0x60, 0x01, 0xd6, 0x68, 0xae, 0x25,
	0x45, 0x9c, 0xcf, 0x99, 0xdb, 0x6d, 0x31, 0x71, 0x1d, 0x34, 0xc0, 0xa7, 0x62,
	0x96, 0x0b, 0xff, 0x1a, 0x47, 0x79, 0x09, 0x22, 0x44, 0x4a, 0x78, 0x33, 0x42,
	0x72, 0x77, 0x44, 0x6f, 0x38, 0x44, 0x75, 0x38, 0x70, 0x65, 0x58, 0x33, 0x31,
	0x59, 0x4b, 0x41, 0x78, 0x46, 0x75, 0x45, 0x5a, 0x34, 0x37, 0x33, 0x58, 0x6e,
	0x53, 0x64, 0x78, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00, 0x22, 0x44,
	0x4c, 0x69, 0x32, 0x32, 0x4a, 0x6f, 0x59, 0x47, 0x31, 0x66, 0x52, 0x57, 0x77,
	0x4b, 0x58, 0x46, 0x4c, 0x33, 0x65, 0x55, 0x79, 0x59, 0x6d, 0x64, 0x72, 0x56,
	0x36, 0x46, 0x46, 0x45, 0x71, 0x63, 0x42, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00,
	0x00, 0x00, 0x22, 0x44, 0x48, 0x65, 0x4b, 0x53, 0x77, 0x58, 0x62, 0x4b, 0x7a,
	0x5a, 0x66, 0x6d, 0x45, 0x41, 0x67, 0x38, 0x36, 0x59, 0x63, 0x36, 0x6d, 0x47,
	0x65, 0x43, 0x34, 0x4d, 0x43, 0x33, 0x50, 0x61, 0x4c, 0x56, 0x64, 0x00, 0x10,
	0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00, 0x22, 0x44, 0x42, 0x33, 0x42, 0x65, 0x5a,
	0x42, 0x6a, 0x70, 0x52, 0x5a, 0x73, 0x33, 0x59, 0x51, 0x65, 0x38, 0x50, 0x45,
	0x6d, 0x41, 0x4c, 0x41, 0x66, 0x51, 0x64, 0x46, 0x43, 0x50, 0x79, 0x55, 0x6e,
	0x4e, 0x67, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00, 0x22, 0x44, 0x37,
	0x58, 0x4e, 0x72, 0x41, 0x61, 0x62, 0x42, 0x67, 0x4e, 0x33, 0x57, 0x4b, 0x39,
	0x33, 0x4c, 0x34, 0x57, 0x5a, 0x50, 0x6a, 0x48, 0x64, 0x64, 0x45, 0x5a, 0x43,
	0x63, 0x68, 0x69, 0x57, 0x43, 0x68, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00,
	0x00, 0x22, 0x44, 0x42, 0x6e, 0x6f, 0x4c, 0x50, 0x74, 0x4a, 0x6d, 0x36, 0x37,
	0x32, 0x39, 0x45, 0x55, 0x46, 0x71, 0x42, 0x4e, 0x6f, 0x61, 0x47, 0x4e, 0x57,
	0x73, 0x33, 0x32, 0x47, 0x75, 0x46, 0x50, 0x46, 0x76, 0x75, 0x00, 0x10, 0xa5,
	0xd4, 0xe8, 0x00, 0x00, 0x00, 0x22, 0x44, 0x51, 0x6f, 0x78, 0x64, 0x64, 0x79,
	0x62, 0x55, 0x6d, 0x6e, 0x6d, 0x70, 0x4d, 0x6b, 0x74, 0x44, 0x72, 0x68, 0x4c,
	0x47, 0x4b, 0x63, 0x50, 0x4b, 0x4c, 0x37, 0x56, 0x78, 0x52, 0x41, 0x6d, 0x7a,
	0x43, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00, 0x22, 0x44, 0x50, 0x41,
	0x69, 0x4c, 0x32, 0x69, 0x58, 0x57, 0x79, 0x32, 0x55, 0x32, 0x68, 0x31, 0x52,
	0x6e, 0x6b, 0x31, 0x6d, 0x64, 0x53, 0x4e, 0x75, 0x46, 0x41, 0x62, 0x4b, 0x48,
	0x74, 0x75, 0x75, 0x61, 0x70, 0x00, 0x10, 0xa5, 0xd4, 0xe8, 0x00, 0x00, 0x00,
	0x22, 0x44, 0x42, 0x61, 0x52, 0x59, 0x57, 0x45, 0x62, 0x62, 0x58, 0x41, 0x52,
	0x76, 0x64, 0x4a, 0x4a, 0x73, 0x57, 0x34, 0x36, 0x68, 0x6a, 0x75, 0x6b, 0x46,
	0x54, 0x6b, 0x62, 0x33, 0x75, 0x64, 0x42, 0x6f, 0x34, 0x00, 0x10, 0xa5, 0xd4,
	0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

GenesisState get_builtin_genesis_block_config()
{
  unsigned total_size = sizeof(raw_genesis_config0);
  std::unique_ptr<char[]> buffer(new char[total_size]);
  char *ptr = buffer.get();
  memcpy(ptr, (const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  ptr += sizeof(raw_genesis_config0);
  return fc::raw::unpack<GenesisState>(buffer.get(), total_size);
}

fc::sha256 get_builtin_genesis_block_state_hash()
{
  fc::sha256::encoder encoder;
  encoder.write((const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  return encoder.result();
}
    }
} // end namespace dfdcore::consensus

#endif